generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model TourType {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tours Tour[]
}

model Tour {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  type        TourType         @relation(fields: [typeId], references: [id])
  typeId      Int
  basePrice   Float
  schedules   Schedule[]
  tickets     TicketCategory[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model TicketCategory {
  id     Int         @id @default(autoincrement())
  name   String
  price  Float
  tour   Tour        @relation(fields: [tourId], references: [id])
  tourId Int
  orders OrderItem[]
}

model Schedule {
  id        Int            @id @default(autoincrement())
  tour      Tour           @relation(fields: [tourId], references: [id])
  tourId    Int
  startDate DateTime
  endDate   DateTime
  maxPeople Int
  slots     ScheduleSlot[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model ScheduleSlot {
  id         Int      @id @default(autoincrement())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  weekDay    Int
  time       String
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  items      OrderItem[]
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  emailSent  Boolean     @default(false)
}

model OrderItem {
  id               Int            @id @default(autoincrement())
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          Int
  ticketCategory   TicketCategory @relation(fields: [ticketCategoryId], references: [id])
  ticketCategoryId Int
  quantity         Int
  price            Float
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model Discount {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  value     Float
  isPercent Boolean  @default(true)
  active    Boolean  @default(true)
  validFrom DateTime
  validTo   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
