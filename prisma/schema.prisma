generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  role          Role     @default(USER)
  orders        Order[]
  refreshTokens String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
}

enum Role {
  ADMIN
  USER
  GUIDE
}

model ExcursionType {
  id         String      @id @default(uuid())
  name       String      @unique
  excursions Excursion[]

  @@index([name])
}

model ExcursionImage {
  id          String    @id @default(uuid())
  url         String
  excursion   Excursion @relation(fields: [excursionId], references: [id])
  excursionId String

  @@index([excursionId])
}

model Excursion {
  id           String            @id @default(uuid())
  title        String
  description  String
  type         ExcursionType     @relation(fields: [typeId], references: [id])
  typeId       String
  basePrice    Float
  currency     String            @default("RUB")
  mainImage    String?           
  images       ExcursionImage[] 
  schedules    Schedule[]
  tickets      TicketCategory[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([title])
  @@index([typeId])
  @@index([createdAt])
}

model TicketCategory {
  id               String         @id @default(uuid())
  name             String
  price            Float
  excursion        Excursion      @relation(fields: [excursionId], references: [id])
  excursionId      String
  orders           OrderItem[]

  @@index([excursionId])
  @@index([name])
}

model Schedule {
  id           String          @id @default(uuid())
  excursion    Excursion       @relation(fields: [excursionId], references: [id])
  excursionId  String
  startDate    DateTime
  endDate      DateTime
  status       ScheduleStatus  @default(ACTIVE)
  slots        ScheduleSlot[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([excursionId])
  @@index([startDate])
  @@index([endDate])
  @@index([status])
}

enum ScheduleStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model ScheduleSlot {
  id          String       @id @default(uuid())
  schedule    Schedule     @relation(fields: [scheduleId], references: [id])
  scheduleId  String
  weekDay     Int
  time        String
  maxPeople   Int
  orderItems  OrderItem[]

  @@index([scheduleId])
  @@index([weekDay])
  @@index([time])
}

model Order {
  id            String         @id @default(uuid())
  user          User?          @relation(fields: [userId], references: [id])
  userId        String?        // Сделано необязательным
  items         OrderItem[]
  totalPrice    Float
  status        OrderStatus    @default(PENDING)
  discount      Discount?      @relation(fields: [discountId], references: [id])
  discountId    String?
  discountAmount Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailSent     Boolean        @default(false)
  
  // Добавленные контактные поля
  contactName   String
  contactEmail  String
  contactPhone  String?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([totalPrice])
}

model OrderItem {
  id               String          @id @default(uuid())
  order            Order           @relation(fields: [orderId], references: [id])
  orderId          String
  ticketCategory   TicketCategory  @relation(fields: [ticketCategoryId], references: [id])
  ticketCategoryId String
  quantity         Int
  price            Float
  scheduleSlot     ScheduleSlot?   @relation(fields: [scheduleSlotId], references: [id])
  scheduleSlotId   String?

  @@index([orderId])
  @@index([ticketCategoryId])
  @@index([scheduleSlotId])
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

model Discount {
  id            String   @id @default(uuid())
  code          String   @unique
  value         Float
  isPercent     Boolean  @default(true)
  active        Boolean  @default(true)
  validFrom     DateTime
  validTo       DateTime
  maxUses       Int?     
  usedCount     Int      @default(0)
  minOrderAmount Float?
  orders        Order[]  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([code])
  @@index([validFrom])
  @@index([validTo])
  @@index([active])
}