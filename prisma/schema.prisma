generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  role          Role     @default(USER)
  orders        Order[]
  refreshTokens String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model ExcursionType {
  id         String      @id @default(uuid())
  name       String      @unique
  excursions Excursion[]
}

model ExcursionImage {
  id          String    @id @default(uuid())
  url         String
  excursion   Excursion @relation(fields: [excursionId], references: [id])
  excursionId String
}


model Excursion {
  id           String            @id @default(uuid())
  title        String
  description  String
  type         ExcursionType     @relation(fields: [typeId], references: [id])
  typeId       String
  basePrice    Float
  mainImage    String?           
  images       ExcursionImage[] 
  schedules    Schedule[]
  tickets      TicketCategory[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}


model TicketCategory {
  id               String         @id @default(uuid())
  name             String
  price            Float
  excursion        Excursion      @relation(fields: [excursionId], references: [id])
  excursionId      String
  orders           OrderItem[]
}

model Schedule {
  id           String          @id @default(uuid())
  excursion    Excursion       @relation(fields: [excursionId], references: [id])
  excursionId  String
  startDate    DateTime
  endDate      DateTime
  maxPeople    Int
  slots        ScheduleSlot[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ScheduleSlot {
  id          String    @id @default(uuid())
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId  String
  weekDay     Int
  time        String
}

model Order {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalPrice  Float
  status      OrderStatus    @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  emailSent   Boolean        @default(false)
}

model OrderItem {
  id               String          @id @default(uuid())
  order            Order           @relation(fields: [orderId], references: [id])
  orderId          String
  ticketCategory   TicketCategory  @relation(fields: [ticketCategoryId], references: [id])
  ticketCategoryId String
  quantity         Int
  price            Float
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model Discount {
  id         String   @id @default(uuid())
  code       String   @unique
  value      Float
  isPercent  Boolean  @default(true)
  active     Boolean  @default(true)
  validFrom  DateTime
  validTo    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
